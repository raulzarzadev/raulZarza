{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Head from \"next/head\";\nimport { useRouter } from \"next/router\";\nimport { WORKS } from \"../../DATA\";\nimport ButtonBack from \"../../src/components/ButtonBack/ButtonBack\";\nimport DetailsView from \"../../src/components/Details\";\nimport Layout from \"../../src/components/Layout\";\nexport default function Details() {\n  const router = useRouter();\n  const {\n    ref\n  } = router.query;\n  const data = WORKS.find(work => work.ref === ref);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"Work details\"\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"flex\",\n      children: /*#__PURE__*/_jsx(ButtonBack, {})\n    }), /*#__PURE__*/_jsx(DetailsView, {\n      data: data === null || data === void 0 ? void 0 : data.resume\n    })]\n  });\n}\nDetails.Layout = Layout; // In a file, far, far, away module.exports = function(dependencyA, dependencyB) { dependencyA(); dependencyB(); } // In another file, the `caller` // This is where the actual, concrete implementation is stonetworking var depA = someConcreteImplementation; var depB = someOtherConcreteImplementation; var someModule = require('pathToSomeModule'); someModule(depA, depB);","map":null,"metadata":{},"sourceType":"module"}